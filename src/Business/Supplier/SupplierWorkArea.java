/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Business.Supplier;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Products.Product;
import Business.UserAccount.UserAccount;
import UserInterface.CardPanel;
import java.awt.CardLayout;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aashrith
 */
public class SupplierWorkArea extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount account;
    Enterprise enterprise;
    EcoSystem system;
    DB4OUtil dB4OUtil;
    Organization organization;

    public SupplierWorkArea(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, EcoSystem system, DB4OUtil dB4OUtil, Organization organization) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.enterprise = enterprise;
        this.system = system;
        this.dB4OUtil = dB4OUtil;
        this.organization = organization;
        initComponents();
        Network Chicago;
        populateComboBox();
        fullscreen();

    }
    public void populateComboBox()
    {
        NetworkComboBox.removeAllItems();
        
        for(Network n :system.getNetworkList())
        {
            if(!n.getName().equalsIgnoreCase("Boston"))
            {
                NetworkComboBox.addItem(n);
            }
        }
    }
    
    public void fullscreen(){
       int width = Toolkit.getDefaultToolkit().getScreenSize().width;
       int heigth = Toolkit.getDefaultToolkit().getScreenSize().height;
       jLabel3.setSize(width, heigth);
   }

 

    public void populateTable(Network network) {

        DefaultTableModel dtm = (DefaultTableModel) SupplierTable.getModel();
        dtm.setRowCount(0);
        
      
        for (Network n : system.getNetworkList()) {
            if (n.getName().equalsIgnoreCase(network.getName())) {
                for (Supplier s : n.getSupplierDirectory().getSupplierList()) {
                    for (Product P : s.getProductDirectory().getProductList()) {
                        Object[] row = new Object[6];
                        row[0] = s;
                        row[1] = s.getSupplierName();
                        row[2] = P.getProdName();
                        row[3] = P.getProdType();
                        row[4] = P.getQuantity();
                        dtm.addRow(row);

                    }
                }
            }

        }
    }

    public void reduceChiList(int SupplierID, String ProductName, String ProductType, int Stock) {

        for (Network n : system.getNetworkList()) {
            if (n.getName().equalsIgnoreCase("Chicago")) {
                for (Supplier s : n.getSupplierDirectory().getSupplierList()) {

                    for (Product P : s.getProductDirectory().getProductList()) {

                        if ((s.getSupplierID() == SupplierID) && P.getProdName().equalsIgnoreCase(ProductName) && P.getProdType().equalsIgnoreCase(ProductType)) {
                            P.setQuantity(P.getQuantity() + Stock);
                            populateTable(n);
                        }

                    }

                }
            }

        }

        JOptionPane.showMessageDialog(null, "Successfully received");
    }

    public Product cheapestProduct(ArrayList<Product> productList) {
        
        Product cheapestProduct = null;

        if(!productList.isEmpty())
       
        {
        cheapestProduct = productList.get(0);

        for (Product x : productList) {
            if (cheapestProduct.getProdPrice() > x.getProdPrice()) {
                cheapestProduct = x;
            }
        }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Boston does not have the needed product");
        }

        return cheapestProduct;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        SupplierTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        intSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        NetworkComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setLayout(null);

        SupplierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SupplierID", "SupplierName", "Product Name", "Product Type", "Stock Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SupplierTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(145, 180, 750, 372);

        jButton1.setText("Get Stock");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(470, 609, 99, 29);
        add(intSpinner);
        intSpinner.setBounds(397, 610, 38, 26);

        jLabel2.setFont(new java.awt.Font("Vivaldi", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Chicago Supplier");
        add(jLabel2);
        jLabel2.setBounds(367, 33, 390, 110);

        jButton2.setText("Logout");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(182, 683, 122, 29);

        NetworkComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NetworkComboBoxActionPerformed(evt);
            }
        });
        add(NetworkComboBox);
        NetworkComboBox.setBounds(150, 100, 108, 34);

        jLabel1.setText("Get Stock from Boston");
        add(jLabel1);
        jLabel1.setBounds(182, 613, 159, 20);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/Supplier/456836-free-download-pine-tree-wallpaper-1920x1080.jpg"))); // NOI18N
        add(jLabel3);
        jLabel3.setBounds(0, 0, 1130, 750);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedrow = SupplierTable.getSelectedRow();
        boolean flag = true;
        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        ArrayList<Product> productList = new ArrayList<>();
        int Stock = (int) intSpinner.getValue();
        String ProductName = SupplierTable.getValueAt(selectedrow, 2).toString();
        String ProductType = SupplierTable.getValueAt(selectedrow, 3).toString();
        String SupplierID = SupplierTable.getValueAt(selectedrow, 0).toString();
        int supplierID = Integer.parseInt(SupplierID);

        for (Network n : system.getNetworkList()) {
            if (n.getName().equalsIgnoreCase("Boston")) {
                for (Supplier s : n.getSupplierDirectory().getSupplierList()) {
                    for (Product P : s.getProductDirectory().getProductList()) {
                        if (P.getProdName().equalsIgnoreCase(ProductName) && P.getProdType().equalsIgnoreCase(ProductType)) {
                            productList.add(P);
                        }
                    }
                }

            }
        }

        Product Y = cheapestProduct(productList);
        if(Y!=null)
        {
        if (Stock > Y.getQuantity()) {
            flag = false;
        }

        if (flag == true) {
            Y.setQuantity(Y.getQuantity() - Stock);
            reduceChiList(supplierID, ProductName, ProductType, Stock);
        } else if (flag == false) {
            JOptionPane.showMessageDialog(null, "The Supplier does not have the stock requested.They have only " + Y.getQuantity() + " Remaining");

        } 
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Sorry for the inconvenience");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CardPanel cardPanel = new CardPanel(userProcessContainer, system, dB4OUtil);
        userProcessContainer.add("Login Screen", cardPanel);
        CardLayout crdLyt = (CardLayout) userProcessContainer.getLayout();
        crdLyt.next(userProcessContainer);
        dB4OUtil.storeSystem(system);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void NetworkComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NetworkComboBoxActionPerformed
            // TODO add your handling code here:
            Network network = (Network)NetworkComboBox.getSelectedItem();
            if(network != null)
            {
                populateTable(network);
            }

    }//GEN-LAST:event_NetworkComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox NetworkComboBox;
    private javax.swing.JTable SupplierTable;
    private javax.swing.JSpinner intSpinner;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
